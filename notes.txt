### Maps
pointer
m := make(map[key]value) =>
	make(map[string]int)
m["a"] = 1
m['b'] = 0	// zero value for non-exists keys

delete(m, "a")

_, ok = m["route"] // ok returns true if the key exists

for key, value := range m { // iterate over the contents of the map

// map literal
commits := map[string] int {
	"rsc": 37,
	"r": 122,
	"pi": 3.14
}

The optional second return value when getting a value from a map indicates if the key was present in the map. This can be used to disambiguate between missing keys and keys with zero values like 0 or "". Here we didn’t need the value itself, so we ignored it with the blank identifier _.


### Constant
A numeric constant has no type until it’s given one, such as by an explicit conversion.
	

    fmt.Println(int64(d))
    

### If-else
A statement can precede conditionals; any variables declared in this statement are available in the current and all subsequent branches.
	

    if num := 9; num < 0 {
        fmt.Println(num, "is negative")
    } else if num < 10 {
        fmt.Println(num, "has 1 digit")
    } else {
        fmt.Println(num, "has multiple digits")
    }
}

### Arrays
    var a [5]int
The type of elements and length are both part of the array’s type. By default an array is zero-valued, which for ints means 0s.

	a := [3] int {1,2,3}
	// var a [3] int = [3] int {1,2,3}
	s := [...] int {1,3,4,3}

### Slices
An uninitialized slice equals to nil and has length 0.

	var s = [] int {1,2,3}
	s := [] int {1,2,3}
	
Slices support a “slice” operator with the syntax slice[low:high]. For example, this gets a slice of the elements s[2], s[3], and s[4].
	

    l := s[2:5]
    fmt.Println("sl1:", l)
    t := []string{"g", "h", "i"}


The slices package contains a number of useful utility functions for slices.
	

    t2 := []string{"g", "h", "i"}
    if slices.Equal(t, t2) {
        fmt.Println("t == t2")
    }
    
    
It’s important to understand that even though a slice contains a pointer, it is itself a value. Under the covers, it is a struct value holding a pointer and a length. It is not a pointer to a struct.

It’s time to talk about the third component of the slice header: its capacity. Besides the array pointer and length, the slice header also stores its capacity:

type sliceHeader struct {
    Length        int
    Capacity      int
    ZerothElement *byte
}

The Capacity field records how much space the underlying array actually has; it is the maximum value the Length can reach. Trying to grow the slice beyond its capacity will step beyond the limits of the array and will trigger a panic.

#### pass by value vs reference
All primitive/basic types (int and its variants, float and its variants, boolean, string, array, and struct) in Go are passed by value

value	reference

string	slice
int		map
float	functions
bool
[3] int
struct

### Strings & Runes

A Go string is a read-only slice of bytes. The language and the standard library treat strings specially - as containers of text encoded in UTF-8. 
Strings in Go are immutable; you can reassign the value of a string variable, but you
cannot change the value of the string that is assigned to it.

string functions: => Replace, Contain, Index, ToUpper, Split
	(does not alter the original string)

### Variables
The := operator can do one trick that you cannot do with var: it allows you to assign
values to existing variables, too. As long as there is one new variable on the lefthand
side of the :=, then any of the other variables can already exist:
x := 10
x, y := 30, "hello"


### Pirntf
%q => quotes

### Sort package
sort.Ints() => sort integers slice
sort.SearchInts()



### functions
function as argument
n [] string, f func(string)


### Structures
type struct student {
	name string
	age int
}
linn := student {
	name: "linn",
	age: 22,
}













































